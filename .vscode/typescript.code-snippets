{
    "Resolver": {
        "prefix": "res",
        "body": [
            "import type { ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Resolvers } from '@resolvers';",
            "",
            "const ${TM_FILENAME_BASE/.*/${0:/capitalize}/}: ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Resolvers = {",
            "    $0",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/.*/${0:/capitalize}/};"
        ],
        "description": "Creates a Component"
    },
    "Scalar": {
        "prefix": "scal",
        "body": [
            "import type { ${TM_FILENAME_BASE/.*/${0:/capitalize}/}ScalarConfig } from '@resolvers';",
            "",
            "import { GraphQLScalarType } from 'graphql';",
            "",
            "const config: ${TM_FILENAME_BASE/.*/${0:/capitalize}/}ScalarConfig = {",
            "    name: '${TM_FILENAME_BASE/.*/${0:/capitalize}/}',",
            "    $0",
            "}",
            "",
            "const ${TM_FILENAME_BASE/.*/${0:/capitalize}/} = new GraphQLScalarType(config)",
            "",
            "export default ${TM_FILENAME_BASE/.*/${0:/capitalize}/};"
        ],
        "description": "Creates a Component"
    },
    "Shim": {
        "prefix": "shim",
        "body": [
            "import type { I${TM_FILENAME_BASE/.*/${0:/capitalize}/} } from 'models/${TM_FILENAME_BASE/.*/${0:/capitalize}/}';",
            "",
            "import ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Model from 'models/${TM_FILENAME_BASE/.*/${0:/capitalize}/}';",
            "import { ObjectID } from 'mongodb';",
            "import { buildId } from 'utils/ids';",
            "",
            "export type ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Input = I${TM_FILENAME_BASE/.*/${0:/capitalize}/} | string | ObjectID",
            "",
            "function getId(input: ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Input): string {",
            "    if (typeof input === 'string') {",
            "        return input;",
            "    }",
            "    if (input instanceof ObjectID) {",
            "        return input.toHexString();",
            "    }",
            "",
            "    if (input._id != null) {",
            "        return input._id;",
            "    }",
            "",
            "    throw 'Uninitialized Value!';",
            "}",
            "",
            "export class ${TM_FILENAME_BASE/.*/${0:/capitalize}/} {",
            "    __typename: '${TM_FILENAME_BASE/.*/${0:/capitalize}/}'",
            "    _input: ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Input",
            "    _full: Promise<I${TM_FILENAME_BASE/.*/${0:/capitalize}/}> | null",
            "",
            "    constructor(input: ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Input) {",
            "        this.__typename = '${TM_FILENAME_BASE/.*/${0:/capitalize}/}'",
            "        this._input = input",
            "        this._full = null",
            "    }",
            "",
            "    id() {",
            "        const id = getId(this._input);",
            "        return buildId('${TM_FILENAME_BASE/.*/${0:/capitalize}/}', id);",
            "    }",
            "",
            "    async full(): Promise<I${TM_FILENAME_BASE/.*/${0:/capitalize}/}> {",
            "        if (typeof this._input === 'object' && '_id' in this._input) {",
            "            return this._input",
            "        }",
            "",
            "        if (this._full != null) {",
            "            return await this._full;",
            "        }",
            "",
            "        const id = getId(this._input);",
            "        const promise = ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Model",
            "            .findById(id)",
            "            .then(value => {",
            "                if (value == null) {",
            "                    throw '${TM_FILENAME_BASE/.*/${0:/capitalize}/} not found!';",
            "                }",
            "                return value",
            "            });",
            "",
            "        this._full = promise;",
            "        return await promise;",
            "    }",
            "}",
            "",
            "export async function ${TM_FILENAME_BASE}(id: string | ObjectID): Promise<${TM_FILENAME_BASE/.*/${0:/capitalize}/} | null> {",
            "    const value = await ${TM_FILENAME_BASE/.*/${0:/capitalize}/}Model.findById(id);",
            "    return value && new ${TM_FILENAME_BASE/.*/${0:/capitalize}/}(value);",
            "}",
        ],
        "description": "Creates a Component"
    },
}